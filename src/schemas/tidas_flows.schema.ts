// Generated by ts-to-zod
import { z } from 'zod';

import {
  CASNumberSchema,
  FTMultiLangSchema,
  GlobalReferenceTypeSchema,
  Int5Schema,
  PercSchema,
  RealSchema,
  StringSchema,
  StringMultiLangSchema,
  UUIDSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';
import { LocationsCategorySchema } from './tidas_locations_category.schema';

export const FlowsSchema = z.object({
  flowDataSet: z.object({
    '@xmlns': z.literal('http://lca.jrc.it/ILCD/Flow'),
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common'),
    '@xmlns:ecn': z.literal(
      'http://eplca.jrc.ec.europa.eu/ILCD/Extensions/2018/ECNumber'
    ),
    '@xmlns:xsi': z.literal('http://www.w3.org/2001/XMLSchema-instance'),
    '@version': z.literal('1.1'),
    '@locations': z.literal('../ILCDLocations.xml'),
    '@xsi:schemaLocation': z.literal(
      'http://lca.jrc.it/ILCD/Flow ../../schemas/ILCD_FlowDataSet.xsd'
    ),
    flowInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        name: z.object({
          baseName: StringMultiLangSchema,
          treatmentStandardsRoutes: StringMultiLangSchema,
          mixAndLocationTypes: StringMultiLangSchema,
          flowProperties: StringMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        }),
        'common:synonyms': FTMultiLangSchema.optional(),
        classificationInformation: z.union([z.any(), z.any()]),
        CASNumber: CASNumberSchema.optional(),
        sumFormula: StringSchema.optional(),
        'common:generalComment': FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      quantitativeReference: z.object({
        referenceToReferenceFlowProperty: Int5Schema,
        'common:other': z.string().optional(),
      }),
      geography: z
        .object({
          locationOfSupply: LocationsCategorySchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      technology: z
        .object({
          technologicalApplicability: FTMultiLangSchema.optional(),
          referenceToTechnicalSpecification:
            GlobalReferenceTypeSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      'common:other': z.string().optional(),
    }),
    modellingAndValidation: z.object({
      LCIMethod: z.object({
        typeOfDataSet: z.union([
          z.literal('Elementary flow'),
          z.literal('Product flow'),
          z.literal('Waste flow'),
        ]),
        'common:other': z.string().optional(),
      }),
      complianceDeclarations: z.object({
        compliance: z.union([
          z.object({
            'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
            'common:approvalOfOverallCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:other': z.string().optional(),
          }),
          z.array(
            z.object({
              'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
              'common:approvalOfOverallCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:other': z.string().optional(),
            })
          ),
        ]),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:referenceToPersonOrEntityEnteringTheData':
          GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string().optional(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    flowProperties: z.object({
      flowProperty: z.union([
        z.object({
          '@dataSetInternalID': Int5Schema,
          referenceToFlowPropertyDataSet: GlobalReferenceTypeSchema,
          meanValue: RealSchema,
          minimumValue: RealSchema.optional(),
          maximumValue: RealSchema.optional(),
          uncertaintyDistributionType: z
            .union([
              z.literal('undefined'),
              z.literal('log-normal'),
              z.literal('normal'),
              z.literal('triangular'),
              z.literal('uniform'),
            ])
            .optional(),
          relativeStandardDeviation95In: PercSchema.optional(),
          dataDerivationTypeStatus: z
            .union([
              z.literal('Measured'),
              z.literal('Calculated'),
              z.literal('Estimated'),
              z.literal('Unknown derivation'),
            ])
            .optional(),
          generalComment: StringMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        }),
        z.array(
          z.object({
            '@dataSetInternalID': Int5Schema,
            referenceToFlowPropertyDataSet: GlobalReferenceTypeSchema,
            meanValue: RealSchema,
            minimumValue: RealSchema.optional(),
            maximumValue: RealSchema.optional(),
            uncertaintyDistributionType: z
              .union([
                z.literal('undefined'),
                z.literal('log-normal'),
                z.literal('normal'),
                z.literal('triangular'),
                z.literal('uniform'),
              ])
              .optional(),
            relativeStandardDeviation95In: PercSchema.optional(),
            dataDerivationTypeStatus: z
              .union([
                z.literal('Measured'),
                z.literal('Calculated'),
                z.literal('Estimated'),
                z.literal('Unknown derivation'),
              ])
              .optional(),
            generalComment: StringMultiLangSchema.optional(),
            'common:other': z.string().optional(),
          })
        ),
      ]),
      'common:other': z.string().optional(),
    }),
    'common:other': z.string().optional(),
  }),
});
