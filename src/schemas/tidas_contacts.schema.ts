// Generated by ts-to-zod
import { z } from 'zod';

import {
  GlobalReferenceTypeSchema,
  LevelTypeSchema,
  STSchema,
  STMultiLangSchema,
  StringSchema,
  StringMultiLangSchema,
  UUIDSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';

export const ContactsSchema = z.object({
  contactDataSet: z.object({
    '@xmlns': z.literal('http://lca.jrc.it/ILCD/Contact'),
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common'),
    '@xmlns:xsi': z.literal('http://www.w3.org/2001/XMLSchema-instance'),
    '@version': z.literal('1.1'),
    '@xsi:schemaLocation': z.literal(
      'http://lca.jrc.it/ILCD/Contact ../../schemas/ILCD_ContactDataSet.xsd'
    ),
    contactInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        'common:shortName': StringMultiLangSchema,
        'common:name': StringMultiLangSchema,
        classificationInformation: z.object({
          'common:classification': z.object({
            'common:class': z.union([
              z.tuple([
                z.object({
                  '@level': LevelTypeSchema,
                  '@classId': z.string(),
                  '#text': z.string(),
                }),
                z.object({
                  '@level': LevelTypeSchema,
                  '@classId': z.string(),
                  '#text': z.string(),
                }),
              ]),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
            ]),
          }),
          'common:other': z.string().optional(),
        }),
        contactAddress: STMultiLangSchema.optional(),
        email: StringSchema.optional(),
        telephone: StringSchema.optional(),
        telefax: StringSchema.optional(),
        WWWAddress: STSchema.optional(),
        centralContactPoint: STMultiLangSchema.optional(),
        contactDescriptionOrComment: STMultiLangSchema.optional(),
        referenceToContact: GlobalReferenceTypeSchema.optional(),
        referenceToLogo: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string().optional(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    'common:other': z.string().optional(),
  }),
  'common:other': z.string().optional(),
});
