// Generated by ts-to-zod
import { z } from 'zod';

import {
  FTMultiLangSchema,
  GlobalReferenceTypeSchema,
  LevelTypeSchema,
  StringMultiLangSchema,
  UUIDSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';

export const SourcesSchema = z.object({
  sourceDataSet: z.object({
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common'),
    '@xmlns': z.literal('http://lca.jrc.it/ILCD/Source'),
    '@xmlns:xsi': z.literal('http://www.w3.org/2001/XMLSchema-instance'),
    '@version': z.literal('1.1'),
    '@xsi:schemaLocation': z.literal(
      'http://lca.jrc.it/ILCD/Source ../../schemas/ILCD_SourceDataSet.xsd'
    ),
    sourceInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        'common:shortName': StringMultiLangSchema,
        classificationInformation: z.object({
          'common:classification': z.object({
            'common:class': z.object({
              '@level': LevelTypeSchema,
              '@classId': z.string(),
              '#text': z.string(),
            }),
            'common:other': z.string().optional(),
          }),
        }),
        sourceCitation: z.string().optional(),
        publicationType: z
          .union([
            z.literal('Undefined'),
            z.literal('Article in periodical'),
            z.literal('Chapter in anthology'),
            z.literal('Monograph'),
            z.literal('Direct measurement'),
            z.literal('Oral communication'),
            z.literal('Personal written communication'),
            z.literal('Questionnaire'),
            z.literal('Software or database'),
            z.literal('Other unpublished and grey literature'),
          ])
          .optional(),
        sourceDescriptionOrComment: FTMultiLangSchema.optional(),
        referenceToDigitalFile: z
          .object({
            '@uri': z.string().optional(),
          })
          .optional(),
        referenceToContact: GlobalReferenceTypeSchema.optional(),
        referenceToLogo: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string().optional(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    'common:other': z.string().optional(),
  }),
});
