// Generated by ts-to-zod
import { z } from 'zod';

import {
  FTMultiLangSchema,
  GISSchema,
  GlobalReferenceTypeSchema,
  Int6Schema,
  LevelTypeSchema,
  MatRSchema,
  MatVSchema,
  PercSchema,
  RealSchema,
  StringSchema,
  StringMultiLangSchema,
  UUIDSchema,
  YearSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';
import { LocationsCategorySchema } from './tidas_locations_category.schema';

export const ProcessesSchema = z.object({
  processDataSet: z.object({
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common'),
    '@xmlns': z.literal('http://lca.jrc.it/ILCD/Process'),
    '@xmlns:xsi': z.literal('http://www.w3.org/2001/XMLSchema-instance'),
    '@version': z.literal('1.1'),
    '@locations': z.literal('../ILCDLocations.xml'),
    '@xsi:schemaLocation': z.string(),
    processInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        name: z.object({
          baseName: StringMultiLangSchema,
          treatmentStandardsRoutes: StringMultiLangSchema,
          mixAndLocationTypes: StringMultiLangSchema,
          functionalUnitFlowProperties: StringMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        }),
        identifierOfSubDataSet: StringSchema.optional(),
        'common:synonyms': FTMultiLangSchema.optional(),
        complementingProcesses: z
          .object({
            referenceToComplementingProcess:
              GlobalReferenceTypeSchema.optional(),
          })
          .optional(),
        classificationInformation: z.object({
          'common:classification': z.object({
            'common:class': z.tuple([
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
            ]),
            'common:other': z.string().optional(),
          }),
        }),
        'common:generalComment': FTMultiLangSchema,
        referenceToExternalDocumentation: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      quantitativeReference: z.object({
        '@type': z.union([
          z.literal('Reference flow(s)'),
          z.literal('Functional unit'),
          z.literal('Other parameter'),
          z.literal('Production period'),
        ]),
        referenceToReferenceFlow: Int6Schema,
        functionalUnitOrOther: StringMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      time: z.object({
        'common:referenceYear': YearSchema,
        'common:dataSetValidUntil': YearSchema.optional(),
        'common:timeRepresentativenessDescription':
          FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      geography: z.object({
        locationOfOperationSupplyOrProduction: z.object({
          '@location': LocationsCategorySchema,
          '@latitudeAndLongitude': GISSchema.optional(),
          descriptionOfRestrictions: FTMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        }),
        subLocationOfOperationSupplyOrProduction: z
          .object({
            '@subLocation': LocationsCategorySchema.optional(),
            '@latitudeAndLongitude': GISSchema.optional(),
            descriptionOfRestrictions: FTMultiLangSchema.optional(),
            'common:other': z.string().optional(),
          })
          .optional(),
        'common:other': z.string().optional(),
      }),
      technology: z
        .object({
          technologyDescriptionAndIncludedProcesses: FTMultiLangSchema,
          referenceToIncludedProcesses: GlobalReferenceTypeSchema.optional(),
          technologicalApplicability: FTMultiLangSchema.optional(),
          referenceToTechnologyPictogramme:
            GlobalReferenceTypeSchema.optional(),
          referenceToTechnologyFlowDiagrammOrPicture:
            GlobalReferenceTypeSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      mathematicalRelations: z
        .object({
          modelDescription: FTMultiLangSchema.optional(),
          variableParameter: z
            .object({
              '@name': MatVSchema.optional(),
              formula: MatRSchema.optional(),
              meanValue: RealSchema.optional(),
              minimumValue: RealSchema.optional(),
              maximumValue: RealSchema.optional(),
              uncertaintyDistributionType: z
                .union([
                  z.literal('undefined'),
                  z.literal('log-normal'),
                  z.literal('normal'),
                  z.literal('triangular'),
                  z.literal('uniform'),
                ])
                .optional(),
              relativeStandardDeviation95In: PercSchema.optional(),
              comment: StringMultiLangSchema.optional(),
              'common:other': z.string().optional(),
            })
            .optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      'common:other': z.string().optional(),
    }),
    modellingAndValidation: z.object({
      LCIMethodAndAllocation: z.object({
        typeOfDataSet: z.union([
          z.literal('Unit process, single operation'),
          z.literal('Unit process, black box'),
          z.literal('LCI result'),
          z.literal('Partly terminated system'),
          z.literal('Avoided product system'),
        ]),
        LCIMethodPrinciple: z
          .union([
            z.literal('Attributional'),
            z.literal('Consequential'),
            z.literal('Consequential with attributional components'),
            z.literal('Not applicable'),
            z.literal('Other'),
          ])
          .optional(),
        deviationsFromLCIMethodPrinciple: FTMultiLangSchema.optional(),
        LCIMethodApproaches: z
          .union([
            z.literal('Allocation - market value'),
            z.literal('Allocation - gross calorific value'),
            z.literal('Allocation - net calorific value'),
            z.literal('Allocation - exergetic content'),
            z.literal('Allocation - element content'),
            z.literal('Allocation - mass'),
            z.literal('Allocation - volume'),
            z.literal('Allocation - ability to bear'),
            z.literal('Allocation - marginal causality'),
            z.literal('Allocation - physical causality'),
            z.literal('Allocation - 100% to main function'),
            z.literal('Allocation - other explicit assignment'),
            z.literal('Allocation - equal distribution'),
            z.literal('Substitution - BAT'),
            z.literal('Substitution - average, market price correction'),
            z.literal(
              'Substitution - average, technical properties correction'
            ),
            z.literal('Allocation - recycled content'),
            z.literal('Substitution - recycling potential'),
            z.literal('Substitution - average, no correction'),
            z.literal('Substitution - specific'),
            z.literal('Consequential effects - other'),
            z.literal('Not applicable'),
            z.literal('Other'),
          ])
          .optional(),
        deviationsFromLCIMethodApproaches: FTMultiLangSchema.optional(),
        modellingConstants: FTMultiLangSchema.optional(),
        deviationsFromModellingConstants: FTMultiLangSchema.optional(),
        referenceToLCAMethodDetails: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      dataSourcesTreatmentAndRepresentativeness: z
        .object({
          dataCutOffAndCompletenessPrinciples: FTMultiLangSchema,
          deviationsFromCutOffAndCompletenessPrinciples:
            FTMultiLangSchema.optional(),
          dataSelectionAndCombinationPrinciples: FTMultiLangSchema.optional(),
          deviationsFromSelectionAndCombinationPrinciples:
            FTMultiLangSchema.optional(),
          dataTreatmentAndExtrapolationsPrinciples:
            FTMultiLangSchema.optional(),
          deviationsFromTreatmentAndExtrapolationPrinciples:
            FTMultiLangSchema.optional(),
          referenceToDataHandlingPrinciples:
            GlobalReferenceTypeSchema.optional(),
          referenceToDataSource: GlobalReferenceTypeSchema,
          percentageSupplyOrProductionCovered: PercSchema.optional(),
          annualSupplyOrProductionVolume: StringMultiLangSchema.optional(),
          samplingProcedure: FTMultiLangSchema.optional(),
          dataCollectionPeriod: StringMultiLangSchema.optional(),
          uncertaintyAdjustments: FTMultiLangSchema.optional(),
          useAdviceForDataSet: FTMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      completeness: z
        .object({
          completenessProductModel: z
            .union([
              z.literal('All relevant flows quantified'),
              z.literal('Relevant flows missing'),
              z.literal('Topic not relevant'),
              z.literal('No statement'),
            ])
            .optional(),
          referenceToSupportedImpactAssessmentMethods:
            GlobalReferenceTypeSchema.optional(),
          completenessElementaryFlows: z
            .object({
              '@type': z
                .union([
                  z.literal('Climate change'),
                  z.literal('Ozone depletion'),
                  z.literal('Summer smog'),
                  z.literal('Eutrophication'),
                  z.literal('Acidification'),
                  z.literal('Human toxicity'),
                  z.literal('Freshwater ecotoxicity'),
                  z.literal('Seawater eco-toxicity'),
                  z.literal('Terrestric eco-toxicity'),
                  z.literal('Radioactivity'),
                  z.literal('Land use'),
                  z.literal('Non-renewable material resource depletion'),
                  z.literal('Renewable material resource consumption'),
                  z.literal('Non-renewable primary energy depletion'),
                  z.literal('Renewable primary energy consumption'),
                  z.literal('Particulate matter/respiratory inorganics'),
                  z.literal('Species depletion'),
                  z.literal('Noise'),
                ])
                .optional(),
              '@value': z
                .union([
                  z.literal('All relevant flows quantified'),
                  z.literal('Relevant flows missing'),
                  z.literal('Topic not relevant'),
                  z.literal('No statement'),
                ])
                .optional(),
            })
            .optional(),
          completenessOtherProblemField: FTMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      validation: z.object({
        review: z.object({
          '@type': z.union([
            z.literal('Dependent internal review'),
            z.literal('Independent internal review'),
            z.literal('Independent external review'),
            z.literal('Accredited third party review'),
            z.literal('Independent review panel'),
            z.literal('Not reviewed'),
          ]),
          scope: z.union([
            z.object({
              '@name': z.union([
                z.literal('Raw data'),
                z.literal('Unit process(es), single operation'),
                z.literal('Unit process(es), black box'),
                z.literal('LCI results or Partly terminated system'),
                z.literal('LCIA results'),
                z.literal('Documentation'),
                z.literal('Life cycle inventory methods'),
                z.literal('LCIA results calculation'),
                z.literal('Goal and scope definition'),
              ]),
              method: z.object({
                '@name': z.union([
                  z.literal('Validation of data sources'),
                  z.literal('Sample tests on calculations'),
                  z.literal('Energy balance'),
                  z.literal('Element balance'),
                  z.literal('Cross-check with other source'),
                  z.literal('Cross-check with other data set'),
                  z.literal('Expert judgement'),
                  z.literal('Mass balance'),
                  z.literal('Compliance with legal limits'),
                  z.literal('Compliance with ISO 14040 to 14044'),
                  z.literal('Documentation'),
                  z.literal(
                    'Evidence collection by means of plant visits and/or interviews'
                  ),
                ]),
              }),
            }),
            z.array(
              z.object({
                '@name': z.union([
                  z.literal('Raw data'),
                  z.literal('Unit process(es), single operation'),
                  z.literal('Unit process(es), black box'),
                  z.literal('LCI results or Partly terminated system'),
                  z.literal('LCIA results'),
                  z.literal('Documentation'),
                  z.literal('Life cycle inventory methods'),
                  z.literal('LCIA results calculation'),
                  z.literal('Goal and scope definition'),
                ]),
                method: z.object({
                  '@name': z.union([
                    z.literal('Validation of data sources'),
                    z.literal('Sample tests on calculations'),
                    z.literal('Energy balance'),
                    z.literal('Element balance'),
                    z.literal('Cross-check with other source'),
                    z.literal('Cross-check with other data set'),
                    z.literal('Expert judgement'),
                    z.literal('Mass balance'),
                    z.literal('Compliance with legal limits'),
                    z.literal('Compliance with ISO 14040 to 14044'),
                    z.literal('Documentation'),
                    z.literal(
                      'Evidence collection by means of plant visits and/or interviews'
                    ),
                  ]),
                }),
              })
            ),
          ]),
          dataQualityIndicators: z
            .object({
              dataQualityIndicator: z
                .object({
                  '@name': z
                    .union([
                      z.literal('Technological representativeness'),
                      z.literal('Time representativeness'),
                      z.literal('Geographical representativeness'),
                      z.literal('Completeness'),
                      z.literal('Precision'),
                      z.literal(
                        'Methodological appropriateness and consistency'
                      ),
                      z.literal('Overall quality'),
                    ])
                    .optional(),
                  '@value': z
                    .union([
                      z.literal('Very good'),
                      z.literal('Good'),
                      z.literal('Fair'),
                      z.literal('Poor'),
                      z.literal('Very poor'),
                      z.literal('Not evaluated / unknown'),
                      z.literal('Not applicable'),
                    ])
                    .optional(),
                })
                .optional(),
            })
            .optional(),
          reviewDetails: FTMultiLangSchema.optional(),
          'common:referenceToNameOfReviewerAndInstitution':
            GlobalReferenceTypeSchema.optional(),
          'common:otherReviewDetails': FTMultiLangSchema.optional(),
          'common:referenceToCompleteReviewReport':
            GlobalReferenceTypeSchema.optional(),
          'common:other': z.string().optional(),
        }),
        'common:other': z.string().optional(),
      }),
      complianceDeclarations: z.object({
        compliance: z.object({
          'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
          'common:approvalOfOverallCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:nomenclatureCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:methodologicalCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:reviewCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:documentationCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:qualityCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:other': z.string().optional(),
        }),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      'common:commissionerAndGoal': z.object({
        'common:referenceToCommissioner': GlobalReferenceTypeSchema,
        'common:project': StringMultiLangSchema.optional(),
        'common:intendedApplications': FTMultiLangSchema,
        'common:other': z.string().optional(),
      }),
      dataGenerator: z
        .object({
          'common:referenceToPersonOrEntityGeneratingTheDataSet':
            GlobalReferenceTypeSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:referenceToConvertedOriginalDataSetFrom':
          GlobalReferenceTypeSchema.optional(),
        'common:referenceToPersonOrEntityEnteringTheData':
          GlobalReferenceTypeSchema,
        'common:referenceToDataSetUseApproval':
          GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dateOfLastRevision': z.string().optional(),
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string(),
        'common:workflowAndPublicationStatus': z
          .union([
            z.literal('Working draft'),
            z.literal('Final draft for internal review'),
            z.literal('Final draft for external review'),
            z.literal('Data set finalised; unpublished'),
            z.literal('Under revision'),
            z.literal('Withdrawn'),
            z.literal('Data set finalised; subsystems published'),
            z.literal('Data set finalised; entirely published'),
          ])
          .optional(),
        'common:referenceToUnchangedRepublication':
          GlobalReferenceTypeSchema.optional(),
        'common:referenceToRegistrationAuthority':
          GlobalReferenceTypeSchema.optional(),
        'common:registrationNumber': StringSchema.optional(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:copyright': z.union([z.literal('true'), z.literal('false')]),
        'common:referenceToEntitiesWithExclusiveAccess':
          GlobalReferenceTypeSchema.optional(),
        'common:licenseType': z.union([
          z.literal('Free of charge for all users and uses'),
          z.literal('Free of charge for some user types or use types'),
          z.literal('Free of charge for members only'),
          z.literal('License fee'),
          z.literal('Other'),
        ]),
        'common:accessRestrictions': FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    exchanges: z.object({
      exchange: z.array(
        z.object({
          '@dataSetInternalID': Int6Schema,
          referenceToFlowDataSet: GlobalReferenceTypeSchema,
          location: StringSchema.optional(),
          functionType: z
            .union([
              z.literal('General reminder flow'),
              z.literal('Allocation reminder flow'),
              z.literal('System expansion reminder flow'),
            ])
            .optional(),
          exchangeDirection: z.union([z.literal('Input'), z.literal('Output')]),
          referenceToVariable: StringSchema.optional(),
          meanAmount: RealSchema,
          resultingAmount: RealSchema,
          minimumAmount: RealSchema.optional(),
          maximumAmount: RealSchema.optional(),
          uncertaintyDistributionType: z
            .union([
              z.literal('undefined'),
              z.literal('log-normal'),
              z.literal('normal'),
              z.literal('triangular'),
              z.literal('uniform'),
            ])
            .optional(),
          relativeStandardDeviation95In: PercSchema.optional(),
          allocations: z
            .object({
              allocation: z
                .object({
                  '@internalReferenceToCoProduct': Int6Schema.optional(),
                  '@allocatedFraction': PercSchema.optional(),
                })
                .optional(),
            })
            .optional(),
          dataSourceType: z
            .union([
              z.literal('Primary'),
              z.literal('> 90% primary'),
              z.literal('Mixed primary / secondary'),
              z.literal('Secondary'),
            ])
            .optional(),
          dataDerivationTypeStatus: z.union([
            z.literal('Measured'),
            z.literal('Calculated'),
            z.literal('Estimated'),
            z.literal('Unknown derivation'),
            z.literal('Missing important'),
            z.literal('Missing unimportant'),
          ]),
          referencesToDataSource: z
            .object({
              referenceToDataSource: GlobalReferenceTypeSchema.optional(),
              'common:other': z.string().optional(),
            })
            .optional(),
          generalComment: StringMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        })
      ),
      'common:other': z.string().optional(),
    }),
    LCIAResults: z.object({
      LCIAResult: z.object({
        referenceToLCIAMethodDataSet: GlobalReferenceTypeSchema.optional(),
        meanAmount: RealSchema,
        uncertaintyDistributionType: z
          .union([
            z.literal('undefined'),
            z.literal('log-normal'),
            z.literal('normal'),
            z.literal('triangular'),
            z.literal('uniform'),
          ])
          .optional(),
        relativeStandardDeviation95In: PercSchema.optional(),
        generalComment: StringMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    'common:other': z.string().optional(),
  }),
});
