// Generated by ts-to-zod
import { z } from 'zod';

import {
  FTMultiLangSchema,
  GlobalReferenceTypeSchema,
  Int5Schema,
  LevelTypeSchema,
  RealSchema,
  StringSchema,
  StringMultiLangSchema,
  UUIDSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';

export const UnitgroupsSchema = z.object({
  unitGroupDataSet: z.object({
    '@xmlns': z.literal('http://lca.jrc.it/ILCD/UnitGroup'),
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common'),
    '@xmlns:xsi': z.literal('http://www.w3.org/2001/XMLSchema-instance'),
    '@version': z.literal('1.1'),
    '@xsi:schemaLocation': z.literal(
      'http://lca.jrc.it/ILCD/UnitGroup ../../schemas/ILCD_UnitGroupDataSet.xsd'
    ),
    unitGroupInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        'common:name': StringMultiLangSchema,
        classificationInformation: z.object({
          'common:classification': z.object({
            'common:class': z.object({
              '@level': LevelTypeSchema,
              '@classId': z.string(),
              '#text': z.string(),
            }),
            'common:other': z.string().optional(),
          }),
        }),
        'common:generalComment': FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      quantitativeReference: z.object({
        referenceToReferenceUnit: Int5Schema,
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    modellingAndValidation: z.object({
      complianceDeclarations: z.object({
        compliance: z.union([
          z.object({
            'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
            'common:approvalOfOverallCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:other': z.string().optional(),
          }),
          z.array(
            z.object({
              'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
              'common:approvalOfOverallCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:other': z.string().optional(),
            })
          ),
        ]),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string().optional(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    units: z
      .object({
        unit: z
          .union([
            z.object({
              '@dataSetInternalID': Int5Schema.optional(),
              name: StringSchema.optional(),
              meanValue: RealSchema.optional(),
              generalComment: StringMultiLangSchema.optional(),
              'common:other': z.string().optional(),
            }),
            z.array(
              z.object({
                '@dataSetInternalID': Int5Schema.optional(),
                name: StringSchema.optional(),
                meanValue: RealSchema.optional(),
                generalComment: StringMultiLangSchema.optional(),
              })
            ),
          ])
          .optional(),
        'common:other': z.string().optional(),
      })
      .optional(),
    'common:other': z.string().optional(),
  }),
});
