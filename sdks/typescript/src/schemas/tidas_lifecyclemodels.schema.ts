// Generated by ts-to-zod
import { z } from 'zod';

import {
  FTMultiLangSchema,
  GlobalReferenceTypeSchema,
  LevelTypeSchema,
  MatVSchema,
  RealSchema,
  StringMultiLangSchema,
  UUIDSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';

export const LifecyclemodelsSchema = z.object({
  lifeCycleModelDataSet: z.object({
    '@xmlns': z.literal(
      'http://eplca.jrc.ec.europa.eu/ILCD/LifeCycleModel/2017'
    ),
    '@xmlns:acme': z.literal('http://acme.com/custom'),
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common'),
    '@xmlns:xsi': z.literal('http://www.w3.org/2001/XMLSchema-instance'),
    '@locations': z.literal('../ILCDLocations.xml'),
    '@version': z.literal('1.1'),
    '@xsi:schemaLocation': z.literal(
      'http://eplca.jrc.ec.europa.eu/ILCD/LifeCycleModel/2017 ../../schemas/ILCD_LifeCycleModelDataSet.xsd'
    ),
    lifeCycleModelInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        name: z.object({
          baseName: StringMultiLangSchema,
          treatmentStandardsRoutes: StringMultiLangSchema,
          mixAndLocationTypes: StringMultiLangSchema,
          functionalUnitFlowProperties: StringMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        }),
        classificationInformation: z.object({
          'common:classification': z.object({
            'common:class': z.tuple([
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
            ]),
            'common:other': z.string().optional(),
          }),
        }),
        referenceToResultingProcess: GlobalReferenceTypeSchema.optional(),
        'common:generalComment': FTMultiLangSchema.optional(),
        referenceToExternalDocumentation: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      quantitativeReference: z.object({
        referenceToReferenceProcess: z.string(),
        'common:other': z.string().optional(),
      }),
      technology: z.object({
        groupDeclarations: z
          .object({
            group: z
              .union([
                z.object({
                  '@id': z.string().optional(),
                  groupName: StringMultiLangSchema.optional(),
                }),
                z.array(
                  z.object({
                    '@id': z.string().optional(),
                    groupName: StringMultiLangSchema.optional(),
                  })
                ),
              ])
              .optional(),
          })
          .optional(),
        processes: z.object({
          processInstance: z
            .union([
              z.array(
                z.object({
                  '@dataSetInternalID': z.string(),
                  '@multiplicationFactor': z.string(),
                  referenceToProcess: GlobalReferenceTypeSchema,
                  scalingFactors: RealSchema.optional(),
                  groups: z
                    .object({
                      memberOf: z
                        .union([
                          z.object({
                            '@groupId': z.string().optional(),
                          }),
                          z.array(
                            z.object({
                              '@groupId': z.string().optional(),
                            })
                          ),
                        ])
                        .optional(),
                    })
                    .optional(),
                  parameters: z
                    .object({
                      parameter: z
                        .union([
                          z.object({
                            '@name': MatVSchema.optional(),
                          }),
                          z.array(
                            z.object({
                              '@name': MatVSchema.optional(),
                            })
                          ),
                        ])
                        .optional(),
                    })
                    .optional(),
                  connections: z.object({
                    outputExchange: z
                      .union([
                        z.object({
                          '@dominant': z.union([
                            z.literal('true'),
                            z.literal('false'),
                          ]),
                          '@flowUUID': UUIDSchema,
                          downstreamProcess: z.union([
                            z.object({
                              '@id': z.string(),
                              '@flowUUID': UUIDSchema,
                              '@location': z.string().optional(),
                              '@dominant': z
                                .union([z.literal('true'), z.literal('false')])
                                .optional(),
                            }),
                            z.array(
                              z.object({
                                '@id': z.string(),
                                '@flowUUID': UUIDSchema,
                                '@location': z.string().optional(),
                                '@dominant': z
                                  .union([
                                    z.literal('true'),
                                    z.literal('false'),
                                  ])
                                  .optional(),
                              })
                            ),
                          ]),
                        }),
                        z.array(
                          z.object({
                            '@dominant': z.union([
                              z.literal('true'),
                              z.literal('false'),
                            ]),
                            '@flowUUID': UUIDSchema,
                            downstreamProcess: z.union([
                              z.object({
                                '@id': z.string(),
                                '@flowUUID': UUIDSchema,
                                '@location': z.string().optional(),
                                '@dominant': z
                                  .union([
                                    z.literal('true'),
                                    z.literal('false'),
                                  ])
                                  .optional(),
                              }),
                              z.array(
                                z.object({
                                  '@id': z.string(),
                                  '@flowUUID': UUIDSchema,
                                  '@location': z.string().optional(),
                                  '@dominant': z
                                    .union([
                                      z.literal('true'),
                                      z.literal('false'),
                                    ])
                                    .optional(),
                                })
                              ),
                            ]),
                          })
                        ),
                      ])
                      .optional(),
                  }),
                  'common:other': z.string().optional(),
                })
              ),
              z.object({
                '@dataSetInternalID': z.string(),
                '@multiplicationFactor': z.string(),
                referenceToProcess: GlobalReferenceTypeSchema,
                scalingFactors: RealSchema.optional(),
                groups: z
                  .object({
                    memberOf: z
                      .union([
                        z.object({
                          '@groupId': z.string().optional(),
                        }),
                        z.array(
                          z.object({
                            '@groupId': z.string().optional(),
                          })
                        ),
                      ])
                      .optional(),
                  })
                  .optional(),
                parameters: z
                  .object({
                    parameter: z
                      .union([
                        z.object({
                          '@name': z.string().optional(),
                          parameter: RealSchema.optional(),
                        }),
                        z.array(
                          z.object({
                            '@name': z.string().optional(),
                            parameter: RealSchema.optional(),
                          })
                        ),
                      ])
                      .optional(),
                  })
                  .optional(),
                connections: z.object({
                  outputExchange: z.union([
                    z.object({
                      '@dominant': z.union([
                        z.literal('true'),
                        z.literal('false'),
                      ]),
                      '@flowUUID': UUIDSchema,
                      downstreamProcess: z.union([
                        z.object({
                          '@id': z.string(),
                          '@flowUUID': UUIDSchema,
                          '@location': z.string().optional(),
                          '@dominant': z
                            .union([z.literal('true'), z.literal('false')])
                            .optional(),
                        }),
                        z.array(
                          z.object({
                            '@id': z.string(),
                            '@flowUUID': UUIDSchema,
                            '@location': z.string().optional(),
                            '@dominant': z
                              .union([z.literal('true'), z.literal('false')])
                              .optional(),
                          })
                        ),
                      ]),
                    }),
                    z.array(
                      z.object({
                        '@dominant': z.union([
                          z.literal('true'),
                          z.literal('false'),
                        ]),
                        '@flowUUID': UUIDSchema,
                        downstreamProcess: z.union([
                          z.object({
                            '@id': z.string(),
                            '@flowUUID': UUIDSchema,
                            '@location': z.string().optional(),
                            '@dominant': z
                              .union([z.literal('true'), z.literal('false')])
                              .optional(),
                          }),
                          z.array(
                            z.object({
                              '@id': z.string(),
                              '@flowUUID': UUIDSchema,
                              '@location': z.string().optional(),
                              '@dominant': z
                                .union([z.literal('true'), z.literal('false')])
                                .optional(),
                            })
                          ),
                        ]),
                      })
                    ),
                  ]),
                }),
                'common:other': z.string().optional(),
              }),
            ])
            .optional(),
        }),
        referenceToDiagram: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
    }),
    modellingAndValidation: z.object({
      dataSourcesTreatmentEtc: z
        .object({
          useAdviceForDataSet: FTMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      validation: z.object({
        review: z.union([
          z.object({
            'common:referenceToNameOfReviewerAndInstitution':
              GlobalReferenceTypeSchema,
            'common:otherReviewDetails': FTMultiLangSchema.optional(),
            'common:referenceToCompleteReviewReport':
              GlobalReferenceTypeSchema.optional(),
            'common:other': z.string().optional(),
          }),
          z.array(
            z.object({
              'common:referenceToNameOfReviewerAndInstitution':
                GlobalReferenceTypeSchema,
              'common:otherReviewDetails': FTMultiLangSchema.optional(),
              'common:referenceToCompleteReviewReport':
                GlobalReferenceTypeSchema.optional(),
              'common:other': z.string().optional(),
            })
          ),
        ]),
        'common:other': z.string().optional(),
      }),
      complianceDeclarations: z.object({
        compliance: z.union([
          z.object({
            'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
            'common:approvalOfOverallCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:nomenclatureCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:methodologicalCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:reviewCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:documentationCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:qualityCompliance': z.union([
              z.literal('Fully compliant'),
              z.literal('Not compliant'),
              z.literal('Not defined'),
            ]),
            'common:other': z.string().optional(),
          }),
          z.array(
            z.object({
              'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
              'common:approvalOfOverallCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:nomenclatureCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:methodologicalCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:reviewCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:documentationCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:qualityCompliance': z.union([
                z.literal('Fully compliant'),
                z.literal('Not compliant'),
                z.literal('Not defined'),
              ]),
              'common:other': z.string().optional(),
            })
          ),
        ]),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      'common:commissionerAndGoal': z.object({
        'common:referenceToCommissioner': GlobalReferenceTypeSchema,
        'common:project': StringMultiLangSchema.optional(),
        'common:intendedApplications': FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      dataGenerator: z
        .object({
          'common:referenceToPersonOrEntityGeneratingTheDataSet':
            GlobalReferenceTypeSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:referenceToPersonOrEntityEnteringTheData':
          GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:copyright': z.union([z.literal('true'), z.literal('false')]),
        'common:referenceToEntitiesWithExclusiveAccess':
          GlobalReferenceTypeSchema.optional(),
        'common:licenseType': z.union([
          z.literal('Free of charge for all users and uses'),
          z.literal('Free of charge for some user types or use types'),
          z.literal('Free of charge for members only'),
          z.literal('License fee'),
          z.literal('Other'),
        ]),
        'common:accessRestrictions': FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    'common:other': z.string().optional(),
  }),
});
