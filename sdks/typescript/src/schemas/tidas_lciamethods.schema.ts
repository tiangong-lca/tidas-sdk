// Generated by ts-to-zod
import { z } from 'zod';

import {
  FTMultiLangSchema,
  GISSchema,
  GlobalReferenceTypeSchema,
  Int6Schema,
  LevelTypeSchema,
  PercSchema,
  RealSchema,
  STSchema,
  STMultiLangSchema,
  StringSchema,
  StringMultiLangSchema,
  UUIDSchema,
  dateTimeSchema,
} from './tidas_data_types.schema';

export const LciamethodsSchema = z.object({
  LCIAMethodDataSet: z.object({
    '@xmlns': z.literal('http://lca.jrc.it/ILCD/LCIAMethod').optional(),
    '@xmlns:common': z.literal('http://lca.jrc.it/ILCD/Common').optional(),
    '@xmlns:xsi': z
      .literal('http://www.w3.org/2001/XMLSchema-instance')
      .optional(),
    '@version': z.literal('1.1').optional(),
    '@xsi:schemaLocation': z
      .literal(
        'http://lca.jrc.it/ILCD/LCIAMethod ../../schemas/ILCD_LCIAMethodDataSet.xsd'
      )
      .optional(),
    LCIAMethodInformation: z.object({
      dataSetInformation: z.object({
        'common:UUID': UUIDSchema,
        'common:name': StringMultiLangSchema,
        methodology: z.string().optional(),
        classificationInformation: z.object({
          'common:classification': z.object({
            'common:class': z.tuple([
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
              z.object({
                '@level': LevelTypeSchema,
                '@classId': z.string(),
                '#text': z.string(),
              }),
            ]),
            'common:other': z.string().optional(),
          }),
        }),
        impactCategory: z
          .union([
            z.literal('Climate change'),
            z.literal('Ozone depletion'),
            z.literal('Terrestrial Eutrophication'),
            z.literal('Aquatic Eutrophication'),
            z.literal('Acidification'),
            z.literal('Photochemical ozone creation'),
            z.literal('Land use'),
            z.literal('Abiotic resource depletion'),
            z.literal('Biotic resource depletion'),
            z.literal('Ionizing radiation'),
            z.literal('Cancer human health effects'),
            z.literal('Non-cancer human health effects'),
            z.literal('Respiratory inorganics'),
            z.literal('Aquatic eco-toxicity'),
            z.literal('Terrestrial eco-toxicity'),
            z.literal('other'),
          ])
          .optional(),
        areaOfProtection: z
          .union([
            z.literal('Natural resources'),
            z.literal('Natural environment'),
            z.literal('Human health'),
            z.literal('Other'),
          ])
          .optional(),
        impactIndicator: StringSchema.optional(),
        'common:generalComment': FTMultiLangSchema.optional(),
        referenceToExternalDocumentation: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      quantitativeReference: z.object({
        referenceQuantity: GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      time: z.object({
        referenceYear: STMultiLangSchema,
        duration: STMultiLangSchema,
        timeRepresentativenessDescription: FTMultiLangSchema,
        'common:other': z.string().optional(),
      }),
      geography: z
        .object({
          interventionLocation: z
            .union([
              z.object({
                '#text': z.string().optional(),
                '@latitudeAndLongitude': GISSchema.optional(),
              }),
              z.string(),
            ])
            .optional(),
          intervensionSubLocation: z
            .union([
              z.object({
                '#text': z.string().optional(),
                '@latitudeAndLongitude': GISSchema.optional(),
              }),
              z.string(),
            ])
            .optional(),
          impactLocation: z
            .union([
              z.object({
                '#text': z.string().optional(),
                '@latitudeAndLongitude': GISSchema.optional(),
              }),
              z.string(),
            ])
            .optional(),
          geographicalRepresentativenessDescription:
            FTMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      impactModel: z.object({
        modelName: STSchema,
        modelDescription: FTMultiLangSchema,
        referenceToModelSource: GlobalReferenceTypeSchema.optional(),
        referenceToIncludedMethods: GlobalReferenceTypeSchema.optional(),
        consideredMechanisms: STMultiLangSchema.optional(),
        referenceToMethodologyFlowChart: GlobalReferenceTypeSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    modellingAndValidation: z.object({
      useAdviceForDataSet: STMultiLangSchema.optional(),
      LCIAMethodNormalisationAndWeighting: z.object({
        typeOfDataSet: z.union([
          z.literal('Inventory indicator'),
          z.literal('Mid-point indicator'),
          z.literal('Damage indicator'),
          z.literal('Area of Protection damage indicator'),
          z.literal('Combined single-point indicator'),
          z.literal('LCIA methodology documentation'),
        ]),
        LCIAMethodPrinciple: z.union([
          z.literal('Distance-to-target'),
          z.literal('Critical surface-time'),
          z.literal('Effective volumes'),
          z.literal('AoP-Damage model'),
          z.literal('Carrying capacity'),
          z.literal('Resource dissipation'),
          z.literal('other'),
        ]),
        deviationsFromLCIAMethodPrinciple: FTMultiLangSchema.optional(),
        normalisation: z
          .union([z.literal('true'), z.literal('false')])
          .optional(),
        referenceToUsableNormalisationDataSets:
          GlobalReferenceTypeSchema.optional(),
        normalisationDescription: STMultiLangSchema.optional(),
        referenceToIncludedNormalisationDataSets:
          GlobalReferenceTypeSchema.optional(),
        weighting: z.union([z.literal('true'), z.literal('false')]).optional(),
        referenceToUsableWeightingDataSets:
          GlobalReferenceTypeSchema.optional(),
        weightingDescription: STMultiLangSchema.optional(),
        referenceToIncludedWeightingDataSets:
          GlobalReferenceTypeSchema.optional(),
      }),
      dataSources: z.object({
        referenceToDataSource: GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      completeness: z
        .object({
          completenessImpactCoverage: PercSchema.optional(),
          inventoryItems: Int6Schema.optional(),
        })
        .optional(),
      validation: z.object({
        review: z.object({
          '@type': z.union([
            z.literal('Dependent internal review'),
            z.literal('Independent internal review'),
            z.literal('Independent external review'),
            z.literal('Accredited third party review'),
            z.literal('Independent review panel'),
            z.literal('Not reviewed'),
          ]),
          scope: z.union([
            z.object({
              '@name': z.union([
                z.literal('Raw data'),
                z.literal('Unit process(es), single operation'),
                z.literal('Unit process(es), black box'),
                z.literal('LCI results or Partly terminated system'),
                z.literal('LCIA results'),
                z.literal('Documentation'),
                z.literal('Life cycle inventory methods'),
                z.literal('LCIA results calculation'),
                z.literal('Goal and scope definition'),
              ]),
              method: z.object({
                '@name': z.union([
                  z.literal('Validation of data sources'),
                  z.literal('Sample tests on calculations'),
                  z.literal('Energy balance'),
                  z.literal('Element balance'),
                  z.literal('Cross-check with other source'),
                  z.literal('Cross-check with other data set'),
                  z.literal('Expert judgement'),
                  z.literal('Mass balance'),
                  z.literal(
                    'Compliance with legal limitsRegulated Inputs and Outputs e.g. emission data are validated for compliance with legal limits, typically after relating and scaling the data to the regulated processes/sites etc.'
                  ),
                  z.literal('Compliance with ISO 14040 to 14044'),
                  z.literal('Documentation'),
                  z.literal(
                    'Evidence collection by means of plant visits and/or interviews'
                  ),
                ]),
              }),
            }),
            z.array(
              z.object({
                '@name': z.union([
                  z.literal('Raw data'),
                  z.literal('Unit process(es), single operation'),
                  z.literal('Unit process(es), black box'),
                  z.literal('LCI results or Partly terminated system'),
                  z.literal('LCIA results'),
                  z.literal('Documentation'),
                  z.literal('Life cycle inventory methods'),
                  z.literal('LCIA results calculation'),
                  z.literal('Goal and scope definition'),
                ]),
                method: z.object({
                  '@name': z.union([
                    z.literal('Validation of data sources'),
                    z.literal('Sample tests on calculations'),
                    z.literal('Energy balance'),
                    z.literal('Element balance'),
                    z.literal('Cross-check with other source'),
                    z.literal('Cross-check with other data set'),
                    z.literal('Expert judgement'),
                    z.literal('Mass balance'),
                    z.literal(
                      'Compliance with legal limitsRegulated Inputs and Outputs e.g. emission data are validated for compliance with legal limits, typically after relating and scaling the data to the regulated processes/sites etc.'
                    ),
                    z.literal('Compliance with ISO 14040 to 14044'),
                    z.literal('Documentation'),
                    z.literal(
                      'Evidence collection by means of plant visits and/or interviews'
                    ),
                  ]),
                }),
              })
            ),
          ]),
          'common:reviewDetails': FTMultiLangSchema.optional(),
          'common:referenceToNameOfReviewerAndInstitution':
            GlobalReferenceTypeSchema,
          'common:otherReviewDetails': FTMultiLangSchema.optional(),
          'common:referenceToCompleteReviewReport':
            GlobalReferenceTypeSchema.optional(),
          'common:other': z.string().optional(),
        }),
        'common:other': z.string().optional(),
      }),
      complianceDeclarations: z.object({
        compliance: z.object({
          'common:referenceToComplianceSystem': GlobalReferenceTypeSchema,
          'common:approvalOfOverallCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:nomenclatureCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:methodologicalCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:reviewCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:documentationCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:qualityCompliance': z.union([
            z.literal('Fully compliant'),
            z.literal('Not compliant'),
            z.literal('Not defined'),
          ]),
          'common:other': z.string().optional(),
        }),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    administrativeInformation: z.object({
      'common:commissionerAndGoal': z
        .object({
          'common:referenceToCommissioner':
            GlobalReferenceTypeSchema.optional(),
          'common:project': StringMultiLangSchema.optional(),
          'common:intendedApplications': FTMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        })
        .optional(),
      dataGenerator: z.object({
        'common:referenceToPersonOrEntityGeneratingTheDataSet':
          GlobalReferenceTypeSchema,
        'common:other': z.string().optional(),
      }),
      dataEntryBy: z.object({
        'common:timeStamp': dateTimeSchema,
        'common:referenceToDataSetFormat': GlobalReferenceTypeSchema,
        'common:referenceToConvertedOriginalDataSetFrom':
          GlobalReferenceTypeSchema.optional(),
        'common:referenceToPersonOrEntityEnteringTheData':
          GlobalReferenceTypeSchema.optional(),
        recommendationBy: z.object({
          referenceToEntity: GlobalReferenceTypeSchema,
          level: z.union([
            z.literal('Level I'),
            z.literal('Level II'),
            z.literal('Level III'),
            z.literal('Interim'),
            z.literal('Not recommended'),
          ]),
          meaning: FTMultiLangSchema,
        }),
        'common:other': z.string().optional(),
      }),
      publicationAndOwnership: z.object({
        'common:dateOfLastRevision': dateTimeSchema,
        'common:dataSetVersion': z.string(),
        'common:referenceToPrecedingDataSetVersion':
          GlobalReferenceTypeSchema.optional(),
        'common:permanentDataSetURI': z.string().optional(),
        'common:workflowAndPublicationStatus': z
          .union([
            z.literal('Working draft'),
            z.literal('Final draft for internal review'),
            z.literal('Final draft for external review'),
            z.literal('Data set finalised; unpublished'),
            z.literal('Under revision'),
            z.literal('Withdrawn'),
            z.literal('Data set finalised; subsystems published'),
            z.literal('Data set finalised; entirely published'),
          ])
          .optional(),
        'common:referenceToUnchangedRepublication':
          GlobalReferenceTypeSchema.optional(),
        'common:referenceToOwnershipOfDataSet': GlobalReferenceTypeSchema,
        'common:copyright': z
          .union([z.literal('true'), z.literal('false')])
          .optional(),
        'common:accessRestrictions': FTMultiLangSchema.optional(),
        'common:other': z.string().optional(),
      }),
      'common:other': z.string().optional(),
    }),
    characterisationFactors: z.object({
      factor: z.union([
        z.object({
          referenceToFlowDataSet: GlobalReferenceTypeSchema,
          location: z.string().optional(),
          exchangeDirection: z.union([z.literal('Input'), z.literal('Output')]),
          meanValue: RealSchema,
          minimumValue: RealSchema.optional(),
          maximumValue: RealSchema.optional(),
          uncertaintyDistributionType: z
            .union([
              z.literal('undefined'),
              z.literal('log-normal'),
              z.literal('normalisation'),
              z.literal('triangular'),
              z.literal('uniform'),
            ])
            .optional(),
          relativeStandardDeviation95In: PercSchema.optional(),
          dataDerivationTypeStatus: z
            .union([
              z.literal('Measured'),
              z.literal('Calculated'),
              z.literal('Estimated'),
              z.literal('Unknown derivation'),
              z.literal('Missing important'),
              z.literal('Missing unimportant'),
            ])
            .optional(),
          deviatingRecommendation: z.union([
            z.literal('Level I'),
            z.literal('Level II'),
            z.literal('Level III'),
            z.literal('Interim'),
            z.literal('Not recommended'),
          ]),
          referenceToDataSource: GlobalReferenceTypeSchema.optional(),
          generalComment: StringMultiLangSchema.optional(),
          'common:other': z.string().optional(),
        }),
        z.array(
          z.object({
            referenceToFlowDataSet: GlobalReferenceTypeSchema,
            location: z.string().optional(),
            exchangeDirection: z.union([
              z.literal('Input'),
              z.literal('Output'),
            ]),
            meanValue: RealSchema,
            minimumValue: RealSchema.optional(),
            maximumValue: RealSchema.optional(),
            uncertaintyType: z
              .union([
                z.literal('undefined'),
                z.literal('log-normal'),
                z.literal('normalisation'),
                z.literal('triangular'),
                z.literal('uniform'),
              ])
              .optional(),
            relativeStandardDeviation95In: PercSchema.optional(),
            dataDerivationTypeStatus: z
              .union([
                z.literal('Measured'),
                z.literal('Calculated'),
                z.literal('Estimated'),
                z.literal('Unknown derivation'),
                z.literal('Missing important'),
                z.literal('Missing unimportant'),
              ])
              .optional(),
            deviatingRecommendation: z.union([
              z.literal('Level I'),
              z.literal('Level II'),
              z.literal('Level III'),
              z.literal('Interim'),
              z.literal('Not recommended'),
            ]),
            referenceToDataSource: z
              .object({
                referenceToDataSource: GlobalReferenceTypeSchema.optional(),
              })
              .optional(),
            generalComment: StringMultiLangSchema.optional(),
          })
        ),
      ]),
      'common:other': z.string().optional(),
    }),
    'common:other': z.string().optional(),
  }),
});
